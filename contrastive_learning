class CLIPModel(nn.Module):
    def __init__(self, rna_encoder, image_encoder):
        super().__init__()
        self.rna_encoder = rna_encoder
        self.image_encoder = image_encoder

    def forward(self, rna_input, image_input):
        rna_embeddings = self.rna_encoder(rna_input)
        image_embeddings = self.image_encoder(image_input)
        return rna_embeddings, image_embeddings



class ContrastiveLoss(nn.Module):
    def __init__(self, temperature=0.5):
        super().__init__()
        self.temperature = temperature

    def forward(self, rna_embeddings, image_embeddings):
        rna_embeddings = F.normalize(rna_embeddings, p=2, dim=-1)
        image_embeddings = F.normalize(image_embeddings, p=2, dim=-1)
        similarity_matrix = torch.matmul(rna_embeddings, image_embeddings.T) / self.temperature
        labels = torch.arange(rna_embeddings.size(0)).to(rna_embeddings.device)
        loss_fn = nn.CrossEntropyLoss()
        loss = (loss_fn(similarity_matrix, labels) + loss_fn(similarity_matrix.T, labels)) / 2
        return loss
